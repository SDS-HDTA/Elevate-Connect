package org.sds.elevateconnect.service;

import lombok.extern.slf4j.Slf4j;
import org.sds.elevateconnect.config.security.JwtClaims;
import org.sds.elevateconnect.dto.UserDetail;
import org.sds.elevateconnect.dto.auth.AuthenticationResponse;
import org.sds.elevateconnect.dto.auth.CheckCodeRequest;
import org.sds.elevateconnect.dto.auth.CheckCodeResponse;
import org.sds.elevateconnect.dto.auth.LoginRequest;
import org.sds.elevateconnect.dto.auth.SignupRequest;
import org.sds.elevateconnect.exceptions.UserException;
import org.sds.elevateconnect.model.InviteCode;
import org.sds.elevateconnect.model.Result;
import org.sds.elevateconnect.mapper.UserMapper;
import org.sds.elevateconnect.model.auth.User;
import org.sds.elevateconnect.model.auth.UserRole;
import org.sds.elevateconnect.service.interfaces.IUserService;
import org.sds.elevateconnect.config.security.JwtService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.List;

@Slf4j
@Service
public class UserService implements IUserService {
    @Autowired
    private UserMapper userMapper;
    @Autowired
    private EmailService emailService;
    @Autowired
    private InviteCodeService inviteCodeService;
    @Autowired
    private JwtService jwtService;
    @Autowired
    private PasswordEncoder passwordEncoder;
    @Autowired
    private AuthenticationManager authenticationManager;

    @Override
    public AuthenticationResponse login(LoginRequest request) {
        // Attempt to authenticate the user
        authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        request.email(),
                        request.password()
                )
        );

        User user = userMapper.getUserByEmail(request.email());

        // Create a new JWT for user
        JwtClaims claims = new JwtClaims(
                user.getFirstName() + " " + user.getLastName(),
                user.getRole().getIntValue(),
                user.getId()
        );

        String jwtToken = jwtService.generateJwt(user, claims);

        return new AuthenticationResponse(jwtToken);
    }

    @Override
    public AuthenticationResponse signup(SignupRequest request) {
        // Verify invite code

        // Build user object
        User user = User.builder()
                .firstName(request.firstName())
                .lastName(request.lastName())
                .email(request.email())
                .password(passwordEncoder.encode(request.password()))
                .role(UserRole.fromInt(request.role()))
                .build();

        // Set role dependent data
        if (user.getRole() == UserRole.COMMUNITY_INSIGHT_PARTNER) {
            user.setCommunityId(request.communityId());
        } else if (user.getRole() == UserRole.COUNTRY_COLLABORATION_PARTNER) {
            user.setCountry(request.country());
        } else if (user.getRole() == UserRole.HUMANITARIAN_IMPACT_PARTNER) {
            user.setOrganization(request.organization());
        }

        // Create new user in DB
        // Note: after this method, the user object will have its autogenerated ID injected into the object
        userMapper.addUser(user);

        // Create a new JWT for new user
        JwtClaims claims = new JwtClaims(
                user.getFirstName() + " " + user.getLastName(),
                user.getRole().getIntValue(),
                user.getId() // Injected from mapper method
        );

        String jwtToken = jwtService.generateJwt(user, claims);

        return new AuthenticationResponse(jwtToken);
    }




//        InviteCode inviteCode = inviteCodeService.getInviteCodeByCode(request.getInviteCode());
//
//        if (inviteCode == null || !inviteCode.getEmail().equals(request.getEmail()))
//        {
//            return Result.error("Invalid Invite Code");
//        } else {
//            try {
//                User user = new User();
//
//                user.setFirstName(request.getFirstName());
//                user.setLastName(request.getLastName());
//                user.setEmail(request.getEmail());
//                user.setPassword(request.getPassword());
//
//                user.setRole(inviteCode.getUserRole());
//
//                if (inviteCode.getUserRole() == UserRole.COUNTRY_COLLABORATION_PARTNER) {
//                    if (inviteCode.getCountry() == null) {
//                        return Result.error("Request is missing a country for " + UserRole.COUNTRY_COLLABORATION_PARTNER.getStringValue() + " role");
//                    }
//
//                    user.setCountry(inviteCode.getCountry());
//                }
//
//                userMapper.addUser(user);
//                inviteCodeService.deleteCode(inviteCode);
//
//                return Result.success(new UserDetail(user));
//            } catch (Exception e) {
//                log.error("e: ", e);
//                return Result.error("Error creating new user. Please try again.");
//            }
//        }

    @Override
    public Result resetPassword(String email, String verificationCode, String newPassword) {
        String code = userMapper.getVerificationCode(email);

        if (code == null || !code.equals(verificationCode)) {
            return Result.error("Invalid Verification Code");
        } else {
            userMapper.updatePassword(email, newPassword);
            userMapper.deleteVerificationCode(email);
            return Result.success();
        }
    }

    @Override
    public Result getUserInfo(Integer userId) {
        User user = userMapper.getUserById(userId);

        if (user == null) {
            return Result.error("No such user");
        } else {
            return Result.success(new UserDetail(user));
        }
    }

    @Override
    public String getFullNameById(Integer userId) {
        return userMapper.getFullNameById(userId);
    }

    @Override
    public List<UserDetail> getAllUsers() {
        List<User> users = userMapper.getAllUsers();

        return users.stream().map(UserDetail::new).toList();
    }

    @Override
    public void deleteUser(Integer id) {
        userMapper.deleteUser(id);
    }

    @Override
    public UserRole getUserRoleById(Integer id) {
        Integer role = userMapper.getUserRoleById(id);

        if (role == null) {
            throw new UserException("No role found for user.");
        } else {
            return UserRole.fromInt(role);
        }
    }

    @Override
    public void updateUserById(Integer id, String email, String firstName, String lastName) {
        User user = userMapper.getUserById(id);
        if (user == null) {
            log.warn("No user found with ID: {}", id);
            return;
        }

        userMapper.updateUserById(id, email, firstName, lastName);
        return;
    }

    @Override
    public Result checkCode(CheckCodeRequest request) {
        InviteCode inviteCode = inviteCodeService.getInviteCodeByCode(request.getCode());
        if (inviteCode != null && inviteCode.getEmail().equals(request.getEmail())) {
            return Result.success(new CheckCodeResponse() {{
                setRole(inviteCode.getUserRole().getIntValue());
                setCommunityId(inviteCode.getCommunityId());
                setCountry(inviteCode.getCountry());
                setOrganization(inviteCode.getOrganization());
            }});
        } else {
            return Result.error("Invalid verification code");
        }
    }
}
