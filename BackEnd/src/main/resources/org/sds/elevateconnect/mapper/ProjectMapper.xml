<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>

<mapper namespace="org.sds.elevateconnect.mapper.ProjectMapper">
    <resultMap id="ProjectResultMap" type="org.sds.elevateconnect.model.project.Project">
        <id property="id" column="id"/>
        <result property="creatorId" column="creator_id"/>
        <result property="projectImageId" column="image_id"/>
        <result property="communityId" column="community_id"/>
        <result property="name" column="name"/>
        <result property="currentStage" column="current_stage" javaType="org.sds.elevateconnect.model.project.ProjectStage" typeHandler="org.sds.elevateconnect.typeHandler.ProjectStageTypeHandler"/>
        <result property="description" column="description"/>
        <result property="category" column="category" javaType="org.sds.elevateconnect.model.project.ProjectCategory" typeHandler="org.sds.elevateconnect.typeHandler.ProjectCategoryTypeHandler"/>
        <result property="targetDate" column="target_date"/>
        <result property="createTime" column="create_time"/>
    </resultMap>

    <insert id="createProject" parameterType="org.sds.elevateconnect.model.project.Project" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO project (
            creator_id, project_image_id, community_id, name,
            current_stage, description, category, target_date
        ) VALUES
        (
             #{creatorId}, #{projectImageId}, #{communityId}, #{name},
             #{currentStage.intValue}, #{description}, #{category.intValue}, #{targetDate}
         )
    </insert>
    <select id="getProjectById" resultType="org.sds.elevateconnect.model.project.Project" resultMap="ProjectResultMap">
        SELECT * FROM project
        WHERE id = #{id}
    </select>
    <select id="getProjectStage" resultType="int">
        SELECT current_stage FROM project
        WHERE id = #{projectId}
    </select>
    <select id="getAllProjects" resultType="org.sds.elevateconnect.model.project.Project" resultMap="ProjectResultMap">
        SELECT * FROM project
    </select>
    <select id="getPaginatedListOfProjects" resultType="org.sds.elevateconnect.model.project.Project" resultMap="ProjectResultMap">
        SELECT *
        FROM project p
        WHERE NOT EXISTS (
            SELECT 1
            FROM project_member pm
            WHERE pm.project_id = p.id
            AND pm.user_id = #{userId}  <!-- user is a member -->
        )
        <if test="searchValue != null and searchType != null">
            <choose>
                <when test="searchType == 0">
                    AND LOWER(p.name) LIKE CONCAT('%', LOWER(#{searchValue}), '%')
                </when>
                <when test="searchType == 1">
                    AND LOWER(p.category) LIKE CONCAT('%', LOWER(#{searchValue}), '%')
                </when>
                <when test="searchType == 2">
                    AND LOWER(p.area) LIKE CONCAT('%', LOWER(#{searchValue}), '%')
                </when>
            </choose>
        </if>
        ORDER BY p.create_time DESC
        LIMIT #{offset}, #{size}
    </select>
    <select id="countProjectsBySearch" resultType="long">
        SELECT COUNT(*)
        FROM project p
        WHERE NOT EXISTS (
            SELECT 1
            FROM project_member pm
            WHERE pm.project_id = p.id
            AND pm.user_id = #{userId}
        )
        <where>
            <choose>
                <when test="searchType == 0">
                    LOWER(name) LIKE #{searchValue}
                </when>
                <when test="searchType == 1">
                    LOWER(category) LIKE #{searchValue}
                </when>
                <when test="searchType == 2">
                    LOWER(area) LIKE #{searchValue}
                </when>
            </choose>
        </where>
    </select>
    <select id="getMyProjectsBySearch" resultType="org.sds.elevateconnect.model.project.Project" resultMap="ProjectResultMap">
        SELECT DISTINCT p.*
        FROM project p
        JOIN project_member pm ON p.id = pm.project_id
        JOIN user u ON u.id = #{userId}
        JOIN community c ON p.community_id = c.id
        WHERE
            (
                (#{userRole} = 0 AND p.community_id = u.community_id)
                OR
                (#{userRole} = 1 AND c.country = u.country)
                OR
                (#{userRole} = 2 AND pm.user_id = #{userId})
                OR
                (#{userRole} = 3)
            )

            <if test="searchValue != null and searchType != null">
                <choose>
                    <when test="searchType == 0">
                        AND LOWER(p.name) LIKE CONCAT('%', LOWER(#{searchValue}), '%')
                    </when>
                    <when test="searchType == 1">
                        AND LOWER(p.category) LIKE CONCAT('%', LOWER(#{searchValue}), '%')
                    </when>
                    <when test="searchType == 2">
                        AND LOWER(p.tags) LIKE CONCAT('%', LOWER(#{searchValue}), '%')
                    </when>
                </choose>
            </if>

        ORDER BY p.create_time DESC
    </select>
    <select id="searchProjects" resultType="org.sds.elevateconnect.model.project.Project" resultMap="ProjectResultMap">
        SELECT * FROM project
        WHERE 1 = 1
        <if test="name != null and name != ''">
            AND name LIKE CONCAT('%', #{name}, '%')
        </if>
        <if test="category != null and category != ''">
            AND category = #{category}
        </if>
        <if test="creatorId != null">
            AND creator_id = #{creatorId}
        </if>
        <if test="stage != null">
            AND current_stage = #{stage}
        </if>
        ORDER BY create_time DESC
    </select>
    <select id="searchByName" resultType="org.sds.elevateconnect.model.project.Project" resultMap="ProjectResultMap">
        SELECT *
        FROM project
        WHERE LOWER(name) LIKE #{name}
        ORDER BY create_time DESC
    </select>
    <update id="updateProject" parameterType="org.sds.elevateconnect.model.project.Project">
        UPDATE project
        SET name = #{name},
        description = #{description},
        category = #{category.intValue},
        target_date = #{targetDate}
        WHERE id = #{id}
    </update>
    
    <update id="updateProjectStage">
        UPDATE project
        SET current_stage = #{stage.intValue}
        WHERE id = #{projectId}
    </update>
    <delete id="deleteProjectById" parameterType="int">
        DELETE FROM project
        WHERE id = #{projectId}
    </delete>
</mapper>
